name: Staging Deploy

on:
  push:
    branches:
      - develop  # Trigger on push to develop branch
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        
    - name: Setup Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Decode staging google-services.json
      run: |
        echo "Debug: Checking if secret exists..."
        if [ -z "${{ secrets.GOOGLE_SERVICES_STAGING }}" ]; then
          echo "ERROR: GOOGLE_SERVICES_STAGING secret is empty or missing"
          exit 1
        fi
        echo "Debug: Secret exists, using alternative decoding method..."
        # Alternative method: write to temp file first
        echo '${{ secrets.GOOGLE_SERVICES_STAGING }}' > /tmp/base64_content.txt
        echo "Debug: Base64 content length: $(wc -c < /tmp/base64_content.txt) characters"
        base64 -d /tmp/base64_content.txt > android/app/google-services.json
        echo "Debug: Checking decoded file..."
        if [ ! -s android/app/google-services.json ]; then
          echo "ERROR: Decoded file is empty"
          exit 1
        fi
        echo "Debug: File size: $(wc -c < android/app/google-services.json) bytes"
        echo "Debug: Validating JSON..."
        if ! python3 -m json.tool android/app/google-services.json > /dev/null 2>&1; then
          echo "ERROR: Decoded JSON is invalid"
          echo "First 200 characters of decoded file:"
          head -c 200 android/app/google-services.json
          exit 1
        fi
        echo "âœ… JSON validation passed"
        echo "Debug: Checking certificate hash in decoded google-services.json..."
        python3 -c "
import json
with open('android/app/google-services.json', 'r') as f:
    data = json.load(f)
    client = data['client'][0]
    oauth_clients = client['oauth_client']
    android_client = next((c for c in oauth_clients if c['client_type'] == 1), None)
    if android_client and 'android_info' in android_client:
        cert_hash = android_client['android_info']['certificate_hash']
        project_id = data['project_info']['project_id']
        print(f'Project ID: {project_id}')
        print(f'Certificate hash: {cert_hash}')
        print(f'Package name: {android_client[\"android_info\"][\"package_name\"]}')
    else:
        print('No Android OAuth client found')
"
        
    - name: Configure Google Client ID for staging
      run: |
        sed -i 's/{{GOOGLE_CLIENT_ID}}/${{ secrets.GOOGLE_CLIENT_ID_STAGING }}/g' web/index.html
        cat web/index.html | grep google-signin-client_id
      
    - name: Run tests
      run: flutter test
      
    - name: Build Flutter Web (Staging)
      run: flutter build web --release --dart-define=ENVIRONMENT=staging
      
    - name: Deploy to Firebase Hosting (Staging)
      run: |
        firebase use fitness-tracker-8d0ae --token "${{ secrets.FIREBASE_TOKEN }}"
        firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}"
        
    - name: Setup Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Ensure debug keystore for staging
      run: |
        echo "Debug: Removing any existing key.properties to force debug signing"
        rm -f android/key.properties
        echo "Debug: Verifying no production keystore files exist"
        rm -f android/app/production-keystore.jks
        rm -f android/app/*.jks
        echo "Debug: Removing any gradle signing config that might reference production keys"
        rm -f android/app/build.gradle.backup
        ls -la android/ | grep -E "(key|keystore)" || echo "No keystore files found - using default debug"
        echo "Debug: Verifying android/app/build.gradle uses debug signing only"
        grep -n "signingConfig" android/app/build.gradle || echo "No signing config found - good for debug"
        
    - name: Build Debug APK (Staging)
      run: flutter build apk --debug
      
    - name: Upload web artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-web-build
        path: build/web/
        
    - name: Upload Debug APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk